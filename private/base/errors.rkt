#lang racket/base

(require ffi/unsafe
         ffi/unsafe/atomic
         "prim.rkt"
         "define.rkt")

(provide _git_error_code ;; legacy only
         _git_error_code/check
         _git_error_code/check/int)

(struct exn:fail:libgit2:foreign exn:fail:contract (who code error)
  #:transparent)

(define (raise-libgit2-foreign-error who code)
  (define (make+raise)
    (let ([code (if (symbol? code)
                    code
                    (cast code _fixint _git_error_code))])
      (define err/null (git_error_last))
      (git_error_clear)
      (define e-klass (and err/null (git_error-klass err/null)))
      (define e-msg (and err/null (git_error-message err/null)))
      (define message
        (format "~a: ~a\n  error code: ~e\n  error class: ~e"
                who
                (or e-msg
                    (string-append "an error occurred;\n"
                                   " the foreign function returned an error code,\n"
                                   " but git_error_last returned a null pointer"))
                code
                e-klass))
      (raise
       (exn:fail:libgit2:foreign
        message
        (current-continuation-marks)
        who
        code
        (and err/null (cons e-klass e-msg))))))
  (if (in-atomic-mode?)
      (call-as-nonatomic make+raise)
      (make+raise)))

#|
According to the docs, git_error_set_str
  "is public so that custom ODB backends and the like
   can relay an error message through libgit2.
   Most regular users of libgit2 will never need
   to call this function---actually, calling it
   in most circumstances (for example, calling
   from within a callback function) will just end up having
   the value overwritten by libgit2 internals."
It seems unlikely you would need to use that in Racket,
but it's worth investigating further.
|#

;; Types

(define-syntax-parser define-git_error_code
  #:datum-literals {=}
  [(_ [_git_error_code:id git_error_code-id:id]
      [code:id = val:exact-integer] ...+)
   #'(begin
       (define-enum _git_error_code
         #:unknown values
         #:base _fixint
         [code = val] ...)
       (begin-for-syntax
         (define-syntax-class git_error_code-id
           #:description "_git_error_code identifier"
           (pattern (~or* (~datum code) ...)))))])

(define-git_error_code [_git_error_code git_error_code-id]
  [GIT_OK = 0]
  [GIT_ERROR = -1]
  [GIT_ENOTFOUND = -3]
  [GIT_EEXISTS = -4]
  [GIT_EAMBIGUOUS = -5]
  [GIT_EBUFS = -6]
  ;; GIT_EUSER is a special error that is never generated by libgit2
  ;; code.  You can return it from a callback (e.g to stop an iteration)
  ;; to know that it was generated by the callback and not by libgit2.
  [GIT_EUSER = -7]
  [GIT_EBAREREPO = -8]
  [GIT_EUNBORNBRANCH = -9]
  [GIT_EUNMERGED = -10]
  [GIT_ENONFASTFORWARD = -11]
  [GIT_EINVALIDSPEC = -12]
  [GIT_ECONFLICT = -13]
  [GIT_ELOCKED = -14]
  [GIT_EMODIFIED = -15]
  [GIT_EAUTH = -16]
  [GIT_ECERTIFICATE = -17]
  [GIT_EAPPLIED = -18]
  [GIT_EPEEl = -19]
  [GIT_EEOF = -20]
  [GIT_EINVALID = -21]
  [GIT_EUNCOMMITTED = -22]
  [GIT_EDIRECTORY = -23]
  [GIT_EMERGECONFLICT = -24]
  [GIT_PASSTHROUGH = -30]
  [GIT_ITEROVER = -31])

(define-enum _git_error_t
  GIT_ERROR_NONE
  GIT_ERROR_NOMEMORY
  GIT_ERROR_OS
  GIT_ERROR_INVALID
  GIT_ERROR_REFERENCE
  GIT_ERROR_ZLIB
  GIT_ERROR_REPOSITORY
  GIT_ERROR_CONFIG
  GIT_ERROR_REGEX
  GIT_ERROR_ODB
  GIT_ERROR_INDEX
  GIT_ERROR_OBJECT
  GIT_ERROR_NET
  GIT_ERROR_TAG
  GIT_ERROR_TREE
  GIT_ERROR_INDEXER
  GIT_ERROR_SSL
  GIT_ERROR_SUBMODULE
  GIT_ERROR_THREAD
  GIT_ERROR_STASH
  GIT_ERROR_CHECKOUT
  GIT_ERROR_FETCHHEAD
  GIT_ERROR_MERGE
  GIT_ERROR_SSH
  GIT_ERROR_FILTER
  GIT_ERROR_REVERT
  GIT_ERROR_CALLBACK
  GIT_ERROR_CHERRYPICK
  GIT_ERROR_DESCRIBE
  GIT_ERROR_REBASE
  GIT_ERROR_FILESYSTEM
  GIT_ERROR_PATCH)

(define-cstruct _git_error
  ([message _string]
   [klass _git_error_t]))

;; Functions

(define-libgit2 git_error_last
  (_fun -> (_or-null _git_error-pointer)))
(define-libgit2 git_error_clear
  (_fun -> _void))
#|
;; not currently used
(define-libgit2 git_error_set_str
  (_fun _int _string -> _void))
(define-libgit2 git_error_set_oom
  (_fun -> _void))
|#

(define ((check-git_error_code/symbol who #:handle [handle-syms null]) code)
  (cond
    [(memq code handle-syms)
     code]
    [(eq? 'GIT_OK code)
     (void)]
    [else
     (raise-libgit2-foreign-error who code)]))

(define (make:_git_error_code/check who #:handle [handle-syms null])
  (make-ctype
   _git_error_code
   #f
   (check-git_error_code/symbol who #:handle handle-syms)))

(define-syntax-parser _git_error_code/check
  #:literals {quote}
  [(_ (~optional (~seq #:handle (~and handle '(:git_error_code-id ...)))))
   #:fail-unless (libgit2-local-who)
   "only allowed inside a define-libgit2 form"
   (syntax-local-lift-expression
    #`(make:_git_error_code/check '#,(libgit2-local-who)
                                  (~? (~@ #:handle handle))))])


(define ((check-git_error_code/int who
                                   #:handle [handle-ints null]
                                   #:handle-positive? [handle-positive? #f])
         code)
  (cond
    [(and handle-positive?
          (exact-positive-integer? code))
     code]
    [(memv code handle-ints)
     code]
    [(= 0 code)
     (void)]
    [else
     (raise-libgit2-foreign-error who code)]))

(define (make:_git_error_code/check/int who
                                        #:handle [handle-ints null]
                                        #:handle-positive? [handle-positive? #f])
  (make-ctype
   _fixint
   #f
   (check-git_error_code/int who #:handle handle-ints #:handle-positive? handle-positive?)))

(define-syntax-parser _git_error_code/check/int
  [(_ (~alt (~optional (~seq #:handle (~and handle '(:exact-integer ...))))
            (~optional (~seq #:handle-positive? handle-positive?:boolean)))
      ...)
   #:fail-unless (libgit2-local-who)
   "only allowed inside a define-libgit2 form"
   (syntax-local-lift-expression
    #`(make:_git_error_code/check/int
       '#,(libgit2-local-who)
       (~? (~@ #:handle handle))
       (~? (~@ #:handle-positive? handle-positive?))))])
