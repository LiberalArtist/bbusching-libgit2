#lang racket/base

(require ffi/unsafe
         "prim.rkt"
         "define.rkt")

(provide _git_error_code
         (contract-out
          [check-git_error_code
           (->* [symbol? (or/c exact-integer? symbol?)]
                [(or/c #f (->c (or/c symbol? exact-nonnegative-integer?) any))
                 #:handle (listof symbol?)
                 #:allow-positive? any/c]
                any)]
          ))

(struct exn:fail:libgit2 exn:fail:contract (who code error)
  #:transparent)

(define (check-git_error_code who code [maybe-on-nonnegative #f]
                              #:handle [handle-syms null]
                              #:allow-positive? [allow-positive? #f])
  (cond
    [(or (eq? 0 code) (eq? 'GIT_OK code))
     (when maybe-on-nonnegative
       (maybe-on-nonnegative 0))]
    [(and maybe-on-nonnegative
          allow-positive?
          (exact-nonnegative-integer? code))
     (maybe-on-nonnegative code)]
    [(memq code handle-syms)
     (void)]
    [else
     (let ([code (if (symbol? code)
                     code
                     (cast code _fixint _git_error_code))])
       (define err/null (git_error_last))
       (git_error_clear)
       (define e-klass (and err/null (git_error-klass err/null)))
       (define e-msg (and err/null (git_error-message err/null)))
       (define message
         (format "~a: ~a\n  error code: ~e\n  error class: ~e"
                 who
                 (or e-msg
                     (string-append "an error occurred;\n"
                                    " the foreign function returned an error code,\n"
                                    " but git_error_last returned a null pointer"))
                 code
                 e-klass))
       (raise
        (exn:fail:libgit2
         message
         (current-continuation-marks)
         who
         code
         (and err/null (cons e-klass e-msg)))))]))

#|
According to the docs, git_error_set_str
  "is public so that custom ODB backends and the like
   can relay an error message through libgit2.
   Most regular users of libgit2 will never need
   to call this function---actually, calling it
   in most circumstances (for example, calling
   from within a callback function) will just end up having
   the value overwritten by libgit2 internals."
It seems unlikely you would need to use that in Racket,
but it's worth investigating further.
|#

;; Types

(define-enum _git_error_code
  #:unknown values
  #:base _fixint
  [GIT_OK = 0]
  [GIT_ERROR = -1]
  [GIT_ENOTFOUND = -3]
  [GIT_EEXISTS = -4]
  [GIT_EAMBIGUOUS = -5]
  [GIT_EBUFS = -6]
  ;; GIT_EUSER is a special error that is never generated by libgit2
  ;; code.  You can return it from a callback (e.g to stop an iteration)
  ;; to know that it was generated by the callback and not by libgit2.
  [GIT_EUSER = -7]
  [GIT_EBAREREPO = -8]
  [GIT_EUNBORNBRANCH = -9]
  [GIT_EUNMERGED = -10]
  [GIT_ENONFASTFORWARD = -11]
  [GIT_EINVALIDSPEC = -12]
  [GIT_ECONFLICT = -13]
  [GIT_ELOCKED = -14]
  [GIT_EMODIFIED = -15]
  [GIT_EAUTH = -16]
  [GIT_ECERTIFICATE = -17]
  [GIT_EAPPLIED = -18]
  [GIT_EPEEl = -19]
  [GIT_EEOF = -20]
  [GIT_EINVALID = -21]
  [GIT_EUNCOMMITTED = -22]
  [GIT_EDIRECTORY = -23]
  [GIT_EMERGECONFLICT = -24]
  [GIT_PASSTHROUGH = -30]
  [GIT_ITEROVER = -31])

(define-enum _git_error_t
  GIT_ERROR_NONE
  GIT_ERROR_NOMEMORY
  GIT_ERROR_OS
  GIT_ERROR_INVALID
  GIT_ERROR_REFERENCE
  GIT_ERROR_ZLIB
  GIT_ERROR_REPOSITORY
  GIT_ERROR_CONFIG
  GIT_ERROR_REGEX
  GIT_ERROR_ODB
  GIT_ERROR_INDEX
  GIT_ERROR_OBJECT
  GIT_ERROR_NET
  GIT_ERROR_TAG
  GIT_ERROR_TREE
  GIT_ERROR_INDEXER
  GIT_ERROR_SSL
  GIT_ERROR_SUBMODULE
  GIT_ERROR_THREAD
  GIT_ERROR_STASH
  GIT_ERROR_CHECKOUT
  GIT_ERROR_FETCHHEAD
  GIT_ERROR_MERGE
  GIT_ERROR_SSH
  GIT_ERROR_FILTER
  GIT_ERROR_REVERT
  GIT_ERROR_CALLBACK
  GIT_ERROR_CHERRYPICK
  GIT_ERROR_DESCRIBE
  GIT_ERROR_REBASE
  GIT_ERROR_FILESYSTEM
  GIT_ERROR_PATCH)

(define-cstruct _git_error
  ([message _string]
   [klass _git_error_t]))

;; Functions

(define-libgit2 git_error_last
  (_fun -> (_or-null _git_error-pointer)))
(define-libgit2 git_error_clear
  (_fun -> _void))
(define-libgit2 git_error_set_str
  (_fun _int _string -> _void))
(define-libgit2 git_error_set_oom
  (_fun -> _void))
