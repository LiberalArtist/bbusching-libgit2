#lang racket

(require "errors.rkt")
(provide (all-defined-out))

(define (check-lg2 val retval fun)
  (if (zero? val)
      retval
      (let [(err (giterr_last))]
        (unless (not err)
          (raise-result-error fun "0" (format "~a: ~a"
                                              (git_error-klass err)
                                              (git_error-message err)))))))
(define-syntax-rule
  (define-libgit2/check name (_fun ... -> _int))
  #`(define-libgit2 name (_fun ... -> (retval : _int)
                               -> (check-lg2 retval retval name))))

(define-syntax-rule
  (define-libgit2/alloc name (_fun _type ... -> _int))
  #`(define-libgit2 name (_fun (out : (_ptr o _type)) ... -> (retval : _int)
                               -> (check-lg2 retval out name))))
